<div class="container">
  <header class="mt-3 mb-5">
    <h1>API de Animes - Documentación</h1>
    <p>Bienvenido a la documentación de la API de Animes. A continuación, encontrarás una descripción de las
      diferentes rutas y cómo interactuar con ellas.</p>
  </header>

  <h2>Instalación</h2>
  <p>Para utilizar esta API, sigue los siguientes pasos:</p>
  <ol>
    <li>Clona este repositorio en tu máquina local.</li>
    <li>Ejecuta el comando <code>npm install</code> para instalar las dependencias necesarias.</li>
    <li>La base de datos es local; un archivo ubicado en <code>/database/animes.json</code>, con un respaldo en caso
      de ser necesario. </li>
    <li>Incluye un archivo <code>.env</code> por defecto.</li>
    <li>Automaticamente abrirá una ventana en el navegador para mostrar las funcionalidades de la API, y cómo
      consumirla.</li>
  </ol>

  <h2>Ejecución</h2>
  <p></p>
  <ul>
    <li>Ejecute el comando <code>npm run dev</code> para iniciar el servidor.</li>
    <li>Automaticamente se abrirá en el navegador el inicio de la app.</li>
    <li>Puedes visitas el frontend ingresando en tu navegador a <code>http://localhost:3000/</code> </li>
  </ul>

  <h2>Estrutura del Proyecto</h2>
  <p>Este proyecto sigue una estructura Modelo-Vista-Controlador (MVC). Aquí tienes una descripción de cada componente:
  </p>

  <h3>Backend</h3>
  <p>Contiene el servidor Node.js y la lógica de la API.</p>
  <ul>
    <li>'app.js': Punto de entrada al backend.</li>
    <li>routes/: Contiene las deficiones de las rutas a la API.</li>
    <li>controllers/: Maneja la lógica de negocio y controla las peticiones.</li>
    <li>models/: Define los modelos de datos para interactuar con la data.</li>
  </ul>
  <h3>Frontend</h3>
  <p> Contiene los archivos HTML y assets para el frontend.</p>
  <ul>
    <li>views/: Contiene todas las vistas utilizadas, partials y layouts.</li>
    <li>public/ Disponibiliza recursos, que deben de ser publicos, a todas las vistas.</li>
  </ul>

  <h3>Testing</h3>
  <p>Contiene las pruebas automatizadas.</p>
  <ul>
    <li>test/: contiene todos archivos .test a ser evaluados </li>
    <li>'testVariables.js': maneja distintas variables utilizadas en los test.</li>
  </ul>

  <h2>Tecnologías utilizadas</h2>
  <ul>
    <li>Node.js: Entorno de ejecución de JavaScript en el servidor.</li>
    <li>Express: Framework de Node.js para crear aplicaciones web.</li>
    <li>Handlebars: Motor de plantillas para renderizar las vistas HTML.</li>
    <li>Morgan: Middleware de registro de solicitudes HTTP.</li>
    <li>Cors: Middleware para habilitar el acceso a recursos desde otros dominios.</li>
    <li>Nodemon: Herramienta de desarrollo para reiniciar automáticamente el servidor cuando se realizan cambios en
      el código.</li>
    <li>Dotenv: Biblioteca para cargar variables de entorno desde un archivo .env.</li>
  </ul>

  <div class="container-fluid my-5 text-center">
    <h2>Rutas de la API</h2>
  </div>

  <h3>Rutas Frontend</h2>
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Ruta</th>
          <th>Método</th>
          <th>Descripción</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>/ , /home , /animes</td>
          <td>GET</td>
          <td>Página de inicio del sitio web.</td>
        </tr>
        <tr>
          <td>/animes/busqueda/</td>
          <td>GET</td>
          <td>Formulario de búsqueda de animes.</td>
        </tr>
        <tr>
          <td>/animes/detalles/:id</td>
          <td>GET</td>
          <td>Detalles de un anime específico.</td>
        </tr>
        <tr>
          <td>/readme</td>
          <td>GET</td>
          <td>Visualización del README del proyecto.</td>
        </tr>
      </tbody>
    </table>

    <h3>Rutas Backend</h3>

    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Ruta</th>
          <th>Método</th>
          <th>Descripción</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>/api/v1/animes</td>
          <td>GET</td>
          <td>Obtener todos los animes.</td>
        </tr>
        <tr>
          <td>/api/v1/animes/:id</td>
          <td>GET</td>
          <td>Buscar un anime específico por ID.</td>
        </tr>
        <tr>
          <td>/api/v1/animes/nombre/:nombre</td>
          <td>GET</td>
          <td>Buscar animes por nombre.</td>
        </tr>
        <tr>
          <td>/api/v1/animes/genero/:genero</td>
          <td>GET</td>
          <td>Buscar animes por género.</td>
        </tr>
        <tr>
          <td>/api/v1/animes</td>
          <td>POST</td>
          <td>Crear un nuevo anime.</td>
        </tr>
        <tr>
          <td>/api/v1/animes/:id</td>
          <td>PUT</td>
          <td>Actualizar un anime existente.</td>
        </tr>
        <tr>
          <td>/api/v1/animes/:id</td>
          <td>DELETE</td>
          <td>Eliminar un anime existente.</td>
        </tr>
      </tbody>
    </table>
    <p><em>Nota: Todas las demás rutas que no coincidan con las anteriores devolverán un mensaje de "Recurso no encontrado".</em></p>

    <div class="my-5">
      <h2>Contribuciones</h2>
    </div>
    <p>Las contribuciones son bienvenidas. Si encuentras algún error o tienes alguna mejora, no dudes en abrir un problema o enviar una solicitud de extracción.</p>

    <div class="my-5">
      <h2>Opiniones personales</h2>
    </div>
    <p>Al poder desarrollar un servidor local en <code>node.js</code>, poder consumir mi api, aunque fuese local, y manipular los datos de la misma haciendo operaciones CRUD, me ha ayudado a poder desarrollar mis habilidades dentro de la programación fullstack, y asi lo siento. Y por qué lo digo.
    <p>
      Al inicio tenia una estructura de desarrollo, donde gran parte del codigo estaba en <code>app.js</code>, y me di cuenta que eran demasiadas lineas de codigo. Por lo cual decidí modularizar el codigo, moviendo las rutas a los archivos <code>anime.route.js</code> y <code>frontend.route.js</code>
    </p>
    <p>
      Luego, y prontamente, entendí que tenia que utilizar una estructura MVC al menos, porque si no estructuraba aun mas mi proyecto, quedarian archivos demasiado grandes haciendo muchas cosas.
    </p>
    <p>
      Al ver que cada modificación que hacia al codigo, podia o no tener errores, aprendí a identificar los errores arrojados en consola, tanto de node como del frontend. Eso me ayudó a naturalizar el uso de <code>try-catch</code>, y de estandarizar el uso de un formato para enviar informacion por el render: <code>title, h1, id</code>.
    </p>
    <p>
      Debo decir, me gustó mucho usar handlebars para renderizar el contenido. Al tener experiencia usando el motor de vistas Blade de Laravel, me llevé una bonita sorpresa ver la simplicidad el codigo, y de poder agregar directamente <code>&lt;style&gt;</code> o <code>&lt;script&gt;</code> en los archivos <code>.handlebars</code>, lo cual me parecio lo mejor de todo.
    </p>
    <h2>Licencia</h2>
    <p>Este proyecto está bajo la Licencia MIT.</p>
</div>