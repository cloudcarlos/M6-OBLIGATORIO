<h1 class="text-center"></h1>

<div class="position-relative overflow-hidden m-0 py-3 text-center bg-body-tertiary">
  <form id="anime-single-form" data-id="{{id}}" class="row m-0 p-0">

    <div class="card mb-3 mx-auto border-0">
      <div class="row g-0 justify-content-md-center justify-content-md-around ">
        <div class="col-12 col-md-8 col-lg-5 px-2">
          <div class="card-body">
            <h4 class="card-title"></h4>
            <h6 class="card-subtitle text-muted"></h6>
          </div>
          {{!-- genero --}}
          <div class="form-floating mb-3">
            <input type="text" class="form-control-plaintext" readonly id="genero" name="genero" placeholder="Genero"
              value="" required>
            <label for="genero">Genero</label>
          </div>
          {{!-- autor --}}
          <div class="form-floating mb-3">
            <input type="text" class="form-control-plaintext" readonly name="autor" id="autor" placeholder="Autor"
              value="" required>
            <label for="autor">Autor</label>
          </div>
          {{!-- año --}}
          <div class="form-floating mb-3">
            <input type="text" class="form-control-plaintext" readonly name="año" id="año" placeholder="Año" value=""
              required>
            <label for="año" class="form-label">Año de estreno</label>
          </div>
          <p class="card-text col-12 fs-6 text-center">Opciones</p>
          <div id="acciones" class="card-body col-12">
            <a href="#" data-id="{{id}}" class="card-link btn btn-warning">Editar</a>
            <a href="#" data-id="{{id}}" class="card-link btn btn-danger">Eliminar</a>
          </div>
          <div id="acciones-editar" class="card-body col-12 d-none">
            <button id="btnGuardar" type="submit" data-id="{{id}}" class="card-link btn btn-success">Guardar</button>
            <a href="#" class="card-link btn btn-secondary">Cancelar</a>
          </div>
        </div>
      </div>
  </form>
</div>


<script defer>

  const formAnime = document.getElementById("anime-single-form");
  const idAnime = formAnime.dataset.id;
  const camposEntrada = formAnime.querySelectorAll("input, select");

  function formEditable() {
    camposEntrada.forEach(campo => {
      if (campo.type === "text") {
        // Si está en modo solo lectura, cambiar a form-control para habilitar la edición
        campo.classList.remove("form-control-plaintext");
        campo.classList.add("form-control");
        campo.disabled = false;
        campo.removeAttribute("readonly");
        campo.dataset.valorOriginal = campo.value;
      }
    });
    camposEntrada[0].focus();
    document.getElementById("acciones-editar").classList.remove("d-none");
    document.getElementById("acciones").classList.add("d-none");
    return console.log("form editable")
  };

  function formEstatico() {
    camposEntrada.forEach(campo => {
      if (campo.type == "text") {
        campo.classList.remove("form-control");
        campo.classList.add("form-control-plaintext");
        campo.disabled = true;
        campo.setAttribute("readonly", true);
        campo.value = campo.dataset.valorOriginal || '';
      }
    });
    camposEntrada[0].focus();
    document.getElementById("acciones").classList.remove("d-none");
    document.getElementById("acciones-editar").classList.add("d-none");
    return console.log("form estatico")
  };

  function renderizarForm(id, data) {

    if (!data || !data.anime) return console.error("Datos válidos no encontrado'");

    const { nombre, genero, año, autor } = data.anime;
    formAnime.querySelector(".card-title").textContent = nombre;
    formAnime.querySelector(".card-subtitle").textContent = `id: ${id}`;
    formAnime.querySelector("#genero").value = genero || '';
    formAnime.querySelector("#año").value = año || ''
    formAnime.querySelector("#autor").value = autor || '';

    camposEntrada.forEach(campo => {
      campo.dataset.valorOriginal = campo.value;
    });

    return console.log("render ok")
  };

  async function obtenerAnime(id) {
    const anime = await fetch(`http://localhost:3000/api/v1/animes/${id}`);
    return anime;
  }

  const btnEditar = formAnime.querySelector("#acciones .btn-warning");
  btnEditar.addEventListener("click", event => {
    event.preventDefault();
    formEditable();
  });

  const btnEliminar = formAnime.querySelector("#acciones .btn-danger");
  btnEliminar.addEventListener("click", async (event) => {
    event.preventDefault();
    const id = event.target.dataset.id;
    const confirmacion = confirm(`PRECAUCION!!\nEstas a punto de eliminar el anime de id ${id} .-\nEstás seguro?`);

    if (confirmacion) {
      const opciones = {
        method: 'DELETE',
        redirect: 'follow'
      }
      const response = await fetch(`/api/v1/animes/${id}`, opciones)
      const result = await response.json();
      if (!result.message) return alert('error en eliminacion de animé.');
      alert(result.message);
      window.location.href = '/home';
      return;
    }

  });

  const btnCancelar = formAnime.querySelector("#acciones-editar .btn-secondary");
  btnCancelar.addEventListener("click", event => {
    event.preventDefault();
    formEstatico();
  });

  const btnGuardar = document.getElementById("btnGuardar");
  btnGuardar.addEventListener("click", async (event) => {
    event.preventDefault()
    console.log("mata mata neee");
    const id = event.target.dataset.id;
    const formData = new FormData(document.getElementById("anime-single-form"));

    //validaciones
    const delta = {
      nombre: document.querySelector('div .card-title').textContent.trim(),
      genero: formData.get("genero").trim(),
      año: Number(formData.get("año")),
      autor: formData.get("autor").trim(),
    }
    console.log(delta)

    if (!delta.nombre || !delta.genero || !delta.autor) return alert("Todos los campos son obligatorio.");

    if (isNaN(delta.año) || parseInt(delta.año) !== delta.año) return alert("El campo año debe ser un número entero.");


    const opciones = {
      method: 'PUT',
      redirect: 'manual',
      body: JSON.stringify(delta),
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
    }
    try {
      const response = await fetch(`/api/v1/animes/${id}`, opciones)
      if (!response.ok) throw new Error('Error en la solicitud de guardado.');

      const result = await response.json();
      alert(result.message);
    } catch (error) {
      console.error('Error:', error);
      alert('Error al guardar. Por favor, intenta nuevamente.');
    }

    return;
  })

  window.onload = async () => {
    try {
      const id = idAnime;
      const response = await obtenerAnime(id);
      const data = await response.json();
      console.log(data)
      await renderizarForm(id, data);
      console.log("jaja")
      formEstatico();
    } catch (error) {
      console.error(error.message)
    }
  }

</script>